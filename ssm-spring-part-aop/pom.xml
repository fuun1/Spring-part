<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>edu.zjgs</groupId>
  <artifactId>ssm-spring-part-aop</artifactId>
  <packaging>pom</packaging>
  <version>1.0-SNAPSHOT</version>
  <modules>
    <module>spring-aop-introduction</module>
    <module>spring-aop-annotation-01</module>
    <module>spring-aop-xml-02</module>
  </modules>

  <properties>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
  </properties>

  <dependencies>
<!--  动态代理：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求代理对象和目标对象实现同样的接口（兄弟两个拜把子模式）。
              有接口情况使用jdk动态代理
      cglib动态代理：通过继承被代理的目标类（认干爹模式）实现代理，所以不需要目标类实现接口。
              没有接口使用cglib动态代理

      AspectJ：早期的AOP实现的框架，SpringAOP借用了AspectJ中的AOP注解
-->
    <dependency><!-- Aop依赖通过依赖传递导入 -->
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>6.0.6</version>
    </dependency>
<!--AspectJ：早期的AOP实现的框架，SpringAOP借用了AspectJ中的AOP注解
    spring-aspects会帮我们传递过来aspectjweaver
-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aspects</artifactId>
      <version>6.0.6</version>
    </dependency>
    <!--test5环境测试 不用每次都创建ioc容器 便于测试-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <version>6.0.6</version>
      <!--范围限于test中-->
      <scope>test</scope>
    </dependency>
    <!--junit5测试-->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.3.1</version>
    </dependency>
  </dependencies>
</project>